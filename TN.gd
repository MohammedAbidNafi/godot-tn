extends Node2D

# generated using inkscape --query-all tndistricts.svg
var d={
	Ariyalur=[953.4,772.77154],
	Chengalpattu=[1187.6992,250.59959],
	Chennai=[1346.5329,127.77688],
	Coimbatore=[176.59072,778.52605],
	Cuddalore=[930,608],
	Dharmapuri=[523.4,391.98666],
	Dindigul=[378.9,976.16227],
	Erode=[239.74398,586.9],
	Kallakurichi=[845.71773,541.92189],
	Kanchipuram=[1159.6992,209.4353],
	Kanyakumari=[318.8,1749.4],
	Karur=[548.7041,882.19391],
	Krishnagiri=[447.84352,264.0834],
	Madurai=[448.7,1155.6],
	Mayiladithurai=[1147.2,766.3],
	Nagapattinam=[1190.8322,941.2],
	Namakkal=[525.9,710.24797],
	Nilgiris=[35.179205,666.66965],
	Perumbalur=[849.59825,736.1],
	Pudukotai=[784,1010.1992],
	Ramanathapuram=[711.41374,1277.6],
	Ranipet=[1035.4198,153.59961],
	Salem=[510.87492,581.5356],
	Sivagangai=[670.3,1117.9],
	Tenkasi=[342.68731,1464.2479],
	Thanjavur=[892.9,849.9625],
	Theni=[349.98068,1189.1748],
	Thoothukudi=[524.26323,1477.0951],
	Tiruchirapalli=[687.5,771.2813],
	Tirunelveli=[342.5811,1598.9395],
	Tirupathur=[769.5,237.28516],
	Tiruppur=[295.39381,797.44396],
	Tiruvallur=[1066.8503,31.7],
	Tiruvannamalai=[844.8954,260.51825],
	Tiruvarur=[1067.9132,907.08195],
	Vellore=[833.79688,171.82608],
	Vilippuram=[1042.3355,412.88469],
	Virudhunagar=[406.3,1340.1006]
}

var keralaborder:=[94.90625,139.441406,88.78985151865409,135.5665894164944,83.70654369280435,130.63934043086718,79.70926394820302,126.59467835132388,71.71773707966707,126.97690534929973,67.37551845072993,121.30438249086549,60.270347023938136,117.68462470079984,55.873706717472814,111.72957213503601,51.06025770768911,106.85836569602499,50.521874286542385,102.56594564750526,47.176222400488136,97.3289484871908,42.26691798547738,97.07357414336765,38.75336986502251,94.9404969094467,36.02742541215734,89.32231978522849,31.063287061506067,91.76966687665919,34.834662194543235,98.85102176500723,36.57576834024579,106.64665331788935,39.071207314452316,114.28837445230475,41.11100171159119,122.00302413797625,46.54720034347997,124.78391702092375,47.80300115857411,129.13848750101855,53.799602396224806,133.9953202022286,57.388141796466904,140.82062752108945,58.42221451661331,146.5358371455965,64.02032778051085,151.07020160911222,64.2724405230119,155.68857711328505,65.6814015921592,159.80797417348626,67.5639636253556,167.54439060377933,69.39678368893178,175.29105368306384,71.0448233038291,176.31649525196778,70.60066785586565,181.08065539935137,74.36538155152986,187.1879859330726,74.55552744467252,187.9248567705412,77.14120935928942,195.23367101295952,79.77579923965808,201.0662379624576,82.18497476343912,203.42071715421474,79.76531129722083,206.72700246516462,84.13715265819779,213.19056264893052,86.3777191445896,220.4827766043291,87.27174406857945,228.2710986369228,89.69532680316924,231.02344565137344,85.16869727075095,226.51685751526122,84.15537963235626,219.82178073008768,81.77907882951281,212.27062943173826,81.61595576560225,215.73811096801865,83.0116746379237,223.55421286353035,83.54585209480389,231.59119268207462,85.21651515862199,239.33940731737016,88.36108313553379,246.7192242345186,89.43580901761167,247.72040336986115,90.03268057614753,248.34490178879332,91.46935208842187,254.6596948018696,94.58529259642589,255.46311794037854,94.47449278973868,259.58606997040283,96.28152168584293,263.0286238467589,101.20824497360647,269.39815761210133,106.42816420222864,275.4943996559608,110.8717114103487,281.65968820008175,117.6641672444971,283.7080964956406,120.22334057099611,277.7865208679369,122.43390348585709,272.4870382962381,120.5143792648057,265.36791651894487,123.6691849076045,258.8923572339623,120.8677795517464,252.5848922347073,124.23205713650286,245.82860732659933,127.42984694975445,239.58772884921845,129.54799164249056,232.29213672885135,124.18061265484724,230.99282333059213,122.56304293557571,225.4804892257697,123.76523364899259,218.5389460659927,126.16431789360377,211.25774066146062,125.85857122735419,206.21184351001443,124.96339406682131,198.5659667966025,117.80644512974388,200.28724670830306,112.52951829857886,202.02506479349475,108.39450620074403,196.0543993070641,109.08209590254542,188.2253056715366,110.77669672995927,180.58281083843295,106.77142818586688,174.4034789956142,102.63444504721018,169.37121411172734,105.06746015914317,163.31881313054106,98.5602500930039,160.14924160945418,94.88208164460654,157.95035974997438,94.76948874748062,152.726221101477,88.0125627986493,148.90917951593846,85.60337043996196,143.3635545312956,91.29287531558006,142.13606170003382]
var tnborder:=[252.535156,66.074219,247.53059096670896,65.13709656298117,243.4774434845105,68.92996655406566,241.0430198779903,75.44459147852369,235.36185475815867,78.62472224662208,230.1473002095352,75.55996758898802,226.0910241806689,74.92576629932059,219.3447266396677,74.62524151058011,218.08100343045152,80.44793579870738,212.80072973844466,82.5747213848801,206.8686847070465,86.75388861957488,200.23013128924268,83.00727066271017,192.10836187884743,83.61063230775895,187.0292689754642,88.02240762726237,185.50597613555345,94.33246360493693,180.31073749665296,100.71868406855786,173.1330111384087,100.52730814350019,167.89812029554898,95.42592931014404,161.6384022735303,93.67547366113689,154.25662074556945,91.51287614664471,151.41993710887343,98.09468617804983,144.03949174109587,99.99062973662019,144.06554552207774,106.76021757273674,142.97374160900642,113.86467740405287,139.4307150401658,118.16301567842623,147.99988858782996,119.38034605250186,148.85603524842955,126.30732470211404,143.6142925240997,130.27352368726238,137.26082856831897,133.99196606987422,132.58691931533994,136.96283810696067,124.86898980331652,135.44340800152156,119.51756569664138,135.13300407328404,112.4301706047477,137.6563158948,108.22751776643068,143.0874694416619,100.03391581707385,143.5804204513804,95.45901941347002,139.3787510714385,89.93053520812423,143.92535990029228,85.37662040698162,145.71110802557482,90.0974304325392,150.0055118325582,96.96797755783165,153.57646750242696,93.6862601155751,160.06238462318592,100.97392078570057,160.22198084841904,105.11975251940765,165.6771190916887,102.54502689129858,171.7339184305229,108.91095009735089,175.7570527540447,110.62041901311714,182.86874670632562,108.70351912053916,190.39840229663656,108.71015546770519,198.26055653211824,113.73794425746381,203.6519144923996,119.44423293234948,198.9203777385492,125.93766390735163,200.1355586063466,124.28386243249713,207.65943163771203,126.34358431335056,213.1382719635735,124.20114014869147,220.3528322367939,122.13320331061382,227.9637030904145,126.16887515618878,231.44418320622898,130.1357878745483,234.1534819238707,127.15690157287652,241.56809548232354,123.85137229024096,248.02650031190333,120.18191971508197,254.28866757343744,123.76994233583586,260.9583948902608,120.00365522766046,267.30730764896884,122.8952081232498,274.7830830529806,119.26164599332526,278.9723958511631,115.98743640630373,284.4238511293039,119.23106496047012,289.7292209803307,126.64694038047351,292.78277898124753,134.49030756379136,294.20225099613486,140.75670291483667,291.0413125719157,146.74740458345778,286.41894572807206,154.16676796533972,283.61215356808424,158.80670664133552,277.43972732343843,157.8179057493551,272.6520696776762,160.32928570478015,271.09362580485777,162.78792993082598,263.7697943804106,164.46845870137807,256.42288228379783,171.01838931726363,252.379972789424,178.49497171129966,250.3393727143318,185.80636826299877,248.2091552924632,192.96346706986432,245.5807323478709,200.78395303291921,245.70334661558877,208.8044716390787,246.3475680371128,215.6821326721884,249.9606676162337,213.01242619084667,244.4350386062296,206.4266123570411,245.0057308811741,199.3840454809384,242.00345168659558,195.1105143393983,236.12929874654515,197.89030389807635,228.6953449436232,202.57079822498213,222.36868332676514,207.60667247060596,216.31348536894515,209.7255078416844,211.59353046129866,212.11202289645723,204.30402013280167,219.27346347012465,201.86500121032424,221.22053996176504,200.92898747240238,227.25982926003536,200.32334451108107,234.57308117761374,202.17319227735948,236.67215837730083,198.256527678343,236.53610279176235,190.24905413907933,236.08794092240962,182.2543620694552,235.80287571712563,174.25114963192277,235.90756168172197,166.25056376994687,235.7338948922969,158.22320835602807,233.59921703924,150.84428407871977,234.72770404549752,142.94155280292313,235.6892823399155,135.0090543757564,238.07765256905745,127.31279885530492,238.75635182373324,125.93908319777742,242.8611805766527,119.98810231388799,248.00033343677416,114.05528266527172,246.8297561508807,108.87960828038935,252.49785053919268,105.13555723356033,255.15004631708064,97.96198255544803,255.80766925699095,89.9138225364356,258.67223359493494,82.52650214422606,258.29357276656094,74.55254976083864,254.84321573840313,67.3490474124713]
#[94.90625,139.441406,94.39971324416015,138.56134396986283,93.99732143572709,137.65272145657303,93.44792591274553,136.8089543680688,92.59614166658695,136.42514383521927,91.57777763141199,136.30836851072945,90.52864274138132,136.26570704730443,89.5835190578652,136.10337934928197,88.78985151865409,135.5665894164944,88.08346522409985,134.75466229020867,87.38093794196868,133.9446494643502,86.59884744002677,133.4136024328444,85.82262682652463,133.57463870491287,85.27180822777643,133.19164412440276,84.83123493160652,132.0891426728745,84.45866304650882,131.21968067690014,83.70654369280435,130.63934043086718,82.72514942425603,130.37859250501194,81.659987394405,130.3521302631602,80.6565647567923,130.47464706913792,80.27565575328656,129.97544719076376,80.29652561592209,128.96992199894345,80.33049491711533,127.9630191572534,80.33758937270801,126.96273364532654,79.70926394820302,126.59467835132388,78.73517563205537,126.74749772787828,77.71531517329811,127.06140754348323,76.702177790098,127.39701723415668,75.74825870062186,127.61493623591666,74.76032769590053,127.64206766495849,73.7684614354964,127.53983463371418,72.79457426956381,127.32668271094039,71.71773707966707,126.97690534929973,70.69776224433633,126.50952449823843,69.93569867032959,125.97061150948298,69.38359133646176,125.33080261756335,68.99348522154777,124.56073405700958,68.71742530440254,123.63104206235164,68.50745656384098,122.51236286811957,68.13657114759818,121.73978004294068,67.37551845072993,121.30438249086549,66.36082187713242,121.07483029186264,65.23117340243014,120.93024013155046,64.12526500224759,120.7497286955473,63.18178865220926,120.41241266947146,62.464883805481286,119.82090871726267,61.76833514121818,119.09347844618156,61.045718280188474,118.34794655945305,60.270347023938136,117.68462470079984,59.41553517401316,117.2038245139447,58.454596531959524,117.00585764261035,58.22193300802297,116.39395218480098,58.05704208318072,115.44956107484586,57.70672249639063,114.43121866966342,57.20402574296665,113.41863381448204,56.58200331822273,112.49151535453011,55.873706717472814,111.72957213503601,55.112187436030865,111.21251300122816,54.096504010521926,110.94088594934173,53.00920939522101,110.74935950834117,52.20617733011374,110.50484328768596,51.685401361379,110.01671632918169,51.44487503519569,109.094357674634,51.40592299673279,107.7688650200286,51.06025770768911,106.85836569602499,50.65078893562136,106.0378895346682,50.628682896279415,105.04740041801152,51.237404936710675,104.28896526209263,52.05626137305744,103.62835687055589,52.63014862452869,102.7930311399841,52.307205974942455,102.05755292787961,51.35376792420097,101.96052330746468,50.521874286542385,102.56594564750526,49.70575384234819,102.95323369601206,49.05083541810691,102.24694106707831,48.64484114839072,101.34786635056557,48.12791911789553,100.63658335495766,47.28054288575397,100.13401813657883,47.125616929458594,99.3917754439519,47.20382340962014,98.3630543836262,47.176222400488136,97.3289484871908,46.698422215185595,97.25081989450234,45.75061885677487,97.95953798690667,44.872187951342404,98.78635210790955,44.52663336347746,98.93889044004277,44.53093461066329,97.93081547223196,44.27498891205448,97.1631218262348,43.269945257507004,97.1184125916145,42.26691798547738,97.07357414336765,42.188036611047345,96.19741874654457,42.62574602016698,95.46782988463548,42.68535761400712,94.74638192499432,41.651865417390475,93.78447379667455,40.64190178770563,93.29424552819049,39.86852200352884,93.3408668067159,39.29016004194604,93.94549184186532,38.75336986502251,94.9404969094467,37.8315699039881,94.6238441755716,37.34453837059721,93.77823891786785,37.878098536647286,93.03942140366384,37.6589664909273,92.1803463606222,36.82624799529111,91.60197890405871,36.05672545481544,91.46532695799623,36.1653708764248,90.38734543267367,36.02742541215734,89.32231978522849,35.18405684997807,89.11445513665768,34.298915736185386,89.49123665527902,33.471238810415365,89.8980738926653,32.39245959012305,90.03797181760034,31.391239665928236,89.9733921138646,30.424270899594838,89.89752252239279,30.696570918823355,90.85929655151702,31.063287061506067,91.76966687665919,31.529705500400667,92.67342432221122,32.05908620970654,93.53438395248759,32.59235602195065,94.38606749672216,33.117465523739426,95.24317878858157,33.618863450793,96.1108072656189,34.08379566167218,96.99848127975572,34.49571644726555,97.91208778701301,34.834662194543235,98.85102176500723,35.08667640095998,99.81501972918468,35.23622832966092,100.81812704500236,35.367467133585386,101.83461866103823,35.537958071118176,102.82470254810558,35.745574443536135,103.79440489705635,35.988293608042405,104.74999853851065,36.266393143095314,105.70092870544565,36.57576834024579,106.64665331788935,36.91423498478565,107.59336109290925,37.27916516251887,108.54589379114428,37.611627669432146,109.48399215802898,37.89710316760789,110.44431662456476,38.160679640278566,111.41645328805528,38.42759278065458,112.38922963385203,38.722936339840494,113.35007731785164,39.071207314452316,114.28837445230475,39.49713109454093,115.19270926254528,39.98118983816333,116.08970982380616,40.344852100792124,117.01192045450544,40.57178488440376,117.97511920172137,40.651827333350724,118.93957881508379,40.60992820094714,119.98093362541412,40.65318530327422,121.02753159513202,41.11100171159119,122.00302413797625,41.90763094174454,121.73915132322492,42.80864285376109,122.0299894552351,43.801190326931966,122.14883410642204,44.7880347167551,122.28009302404433,44.61034470542625,123.10265430531015,44.47618544017195,123.44360082793291,45.38110648200831,124.06981913601274,46.54720034347997,124.78391702092375,47.560026868690166,125.39394393427807,48.246335152702606,125.83450614206407,47.52327238818673,125.89825421489918,46.51518019359992,125.87320079409575,46.33786096948352,126.55633508528018,46.94579071022148,127.36321437795553,47.542782464514,128.25962794548857,47.80300115857411,129.13848750101855,48.301307088855296,129.86483893578426,49.258569442330845,130.4601458431536,50.133672502450366,130.9166021027955,50.98643721464902,131.4176916768244,51.80599142650191,132.03993706106786,52.647058194239946,132.49286199421306,53.28234251424266,133.1819616927065,53.799602396224806,133.9953202022286,54.428637234419696,134.76418036734668,55.07070113452169,135.4700202076216,55.84610350454662,136.24196568088306,56.486260692155554,137.04663538826244,56.735138309491155,137.98998745229892,56.74974456256317,138.93593569720417,56.949572103267755,139.88648507558437,57.388141796466904,140.82062752108945,57.908273640153006,141.69303549094872,58.61264575368319,142.12360712071415,57.87473177042884,142.43328651668725,57.327515470926656,142.7684381598734,57.86761045732302,143.58764280214362,58.1847925388247,144.53825387813598,58.14156636185491,145.538484033366,58.42221451661331,146.5358371455965,59.18525012293403,147.04427052466679,60.13376242924355,147.29214097899083,60.82260987338706,148.04120237195826,61.46010624175688,148.86138005416973,61.88192466248815,149.73985394169483,62.15958502984976,150.73227327799654,62.877619351195456,151.06842498750444,64.02032778051085,151.07020160911222,65.00872442532757,151.22522501678486,64.85178717193543,151.74676921877222,63.8451703009875,151.72494869790503,63.153598698022144,152.0519344412074,63.80533340966029,152.76069027556912,64.19244927565981,153.6552615986012,64.18266648004435,154.66873247609533,64.2724405230119,155.68857711328505,64.49225461912549,156.6388365030164,64.73773929126904,157.60176097959325,65.0672073776184,158.23400016834168,65.99408242584003,157.97824783204805,67.00313204814509,157.94721513551028,67.14074001797954,158.55076992976072,66.27846875120136,159.0695860691033,65.6814015921592,159.80797417348626,65.91414512937679,160.73379470485796,66.42597512289036,161.69627281010634,66.78375834949522,162.58512089222734,66.9220266453385,163.58946002533273,67.02019660825673,164.57939074101873,67.23985511967624,165.54726214954601,67.41527161789527,166.549669469908,67.5639636253556,167.54439060377933,67.80094605707993,168.49809949729476,68.11902601399274,169.46091045194,68.44078107093723,170.41119529205932,68.67752912471524,171.37265016431428,68.75928379450036,172.36539874597432,68.8202134238197,173.3706059903309,69.02951195510599,174.3619075532516,69.39678368893178,175.29105368306384,69.71366840616678,176.23173865219877,69.7957398962948,177.21150677511213,69.7680926130597,178.2454857222709,69.87260296862063,179.24701920336048,69.96276148942087,178.60622408830906,70.15817093784632,177.63801867812228,70.70354086464255,176.98738215200868,71.0448233038291,176.31649525196778,71.8850959409528,176.80404223848765,72.3407921660553,177.65944504871027,71.91802798445161,178.46612361422987,71.79377750191892,179.3353761545821,71.95322513850661,179.9026900143478,70.97649565276787,179.70015043489713,70.35032096330048,180.13019087897683,70.60066785586565,181.08065539935137,70.9333386046874,181.77968953794303,71.71626799066523,182.52178602155982,72.36823090916327,183.4518629620366,72.69215715961414,184.2616759440179,72.84794739886333,185.26469754293421,73.14258830068938,186.17552365509215,73.62012962589993,187.10986834894283,74.36538155152986,187.1879859330726,75.08234945984574,186.8599830180282,75.844591886,187.49448720831677,76.31843527555186,188.37602190808693,76.76856242600144,189.28424587925667,76.16899410209014,189.61980439813556,75.4336421227639,189.3724334115121,75.16390817407536,188.561774411503,74.55552744467252,187.9248567705412,74.62491705644244,188.77344600269947,75.09926945077866,189.64482617616417,75.59788697376167,190.5087923469675,75.90932660463604,191.4809783617419,76.09101451029224,192.42350827895436,76.51336849048276,193.3705121049402,76.95499505874152,194.25619506304207,77.14120935928942,195.23367101295952,77.19668046399212,196.22834564757008,77.20493923586068,197.23570575796575,77.826174115368,197.95990434830196,78.09848212187535,198.91339783206647,78.25946859781254,199.94663304304586,78.31590470041034,200.9587593362337,78.7485680363086,201.08808006360132,79.77579923965808,201.0662379624576,80.16974732919702,200.53327341364653,80.0352134936959,199.5544643824096,80.24402774487135,199.22202820783852,80.66754570438529,200.0575188547899,81.08030012673146,201.13456563484732,81.48426695189082,202.17664152862054,81.94510372843533,203.06024671303717,82.18497476343912,203.42071715421474,81.36868813843354,202.98131445125807,80.56719767933507,202.49936672587478,79.93210383249631,202.18113472854517,79.83727250009454,203.1863209361526,79.67691175954212,204.02462673592638,79.34630183240967,204.68775923696552,79.63205234075703,205.65916979533156,79.76531129722083,206.72700246516462,79.97188070429483,207.61310523249895,80.40425011246653,208.40772979411693,81.10281459139803,209.25948970152018,81.65797345872122,210.1010062900384,82.1784231033868,210.96466036554537,82.7812541601535,211.75599134545678,83.47933312810741,212.48435875548594,84.13715265819779,213.19056264893052,84.74475424171364,214.01980112990233,85.37787736069592,214.79706725970067,86.00902728888686,215.55135447236287,86.35707273416554,216.4999680995845,86.35664084736727,217.5068763255254,86.22468386984036,218.50873934123695,86.13672267680643,219.49415965444874,86.3777191445896,220.4827766043291,86.8668021075151,221.2849979355948,87.18822874572614,222.24739814429338,87.23362917588557,223.2836913466733,87.25234766794959,224.29069742990345,87.25629091186029,225.28659728439388,87.25468639900839,226.27773482629414,87.25676162078454,227.27045397175388,87.27174406857945,228.2710986369228,87.62328733105355,228.97972182340146,88.63811118696061,229.01276624771637,89.15132606143452,228.38207024477634,89.93486987893084,228.8510878801492,90.61619413956973,229.4970793025874,90.97805662491294,230.3888010246412,90.68488850379504,231.1839286035317,89.69532680316924,231.02344565137344,88.78110368560887,230.71742822933447,87.82467858335735,230.42728931208822,86.71518786280522,230.2868404996935,85.79733783938327,230.16419739849096,85.13039517648738,229.5653704910725,85.00683335575035,228.52012006429527,85.03449776398834,227.501887863732,85.16869727075095,226.51685751526122,85.45538243092128,225.60793054985118,85.94066399622957,224.70232678647412,86.2923298667636,223.73492199685717,86.00006624550485,222.83531169492124,85.07972786768177,222.4868901404905,84.3935145900303,221.87260755893638,84.21113474711049,220.81450793428965,84.15537963235626,219.82178073008768,84.03036991383011,218.84859945631067,83.72716092029228,217.87003797598987,83.47170681698954,216.9123887303797,83.29172168038421,215.94431324525576,83.13762151370727,214.91430005469687,82.75216119163068,214.0216140357772,82.23113678441227,213.1878693281597,81.77907882951281,212.27062943173826,81.27152148408899,211.40988739836038,80.57083494985731,210.72860760549702,80.47196058689156,210.89577871528567,80.56179162254915,211.89468013433648,80.74206542030468,212.863569825246,80.99703273569405,213.83435552705456,81.29705955207243,214.79012180570956,81.61595576560225,215.73811096801865,81.92849590623707,216.69040204421515,82.21080974086428,217.65137927212734,82.43419543557243,218.61972613000114,82.5833073818555,219.61854244863432,82.67724361906532,220.62866746025634,82.79150254621476,221.6088305267298,82.90971520349642,222.57727666637516,83.0116746379237,223.55421286353035,83.07717389650998,224.55984610253356,83.08600602626863,225.61438336772272,83.07237708499908,226.60759341713174,83.08946180207163,227.61666931268002,83.1372668923917,228.6292489001707,83.21579230379456,229.63269850695235,83.326463610968,230.6174205658768,83.54585209480389,231.59119268207462,83.87534212171037,232.54231010725655,84.25152264279288,233.47200331092824,84.62415342578846,234.40341031881195,84.90910258018361,235.40760920629327,85.00462300376329,236.37661107336663,85.01361775077633,237.3393908096549,85.05020475008843,238.33780189460444,85.21651515862199,239.33940731737016,85.53782024011218,240.2889091226572,85.96227449355383,241.22615474171891,86.42230400851844,242.13889246742988,86.84758997213257,243.01077088066359,87.24385538911912,243.9233124607635,87.61545002109679,244.8491868631242,87.98148791944266,245.78296661271844,88.36108313553379,246.7192242345186,88.72953783291382,247.65829230549673,88.94700818587191,248.63651265451972,89.09244701188004,249.6153242318095,89.29689381324131,250.6151955214395,89.81086540946652,250.67554555317764,89.80154701129943,249.6956995247377,89.61385333583013,248.70813568381837,89.43580901761167,247.72040336986115,89.49258078280813,246.7416687913699,89.0215040578278,245.82493405225708,88.58564790405627,244.97794369283505,88.60257725242563,244.64598862897296,89.16569335831169,245.49599685584997,89.56902369398452,246.41466620647012,89.8919001509291,247.3647927550829,90.03268057614753,248.34490178879332,90.30063957867921,249.31671597180784,90.37720251295637,250.31445915270203,90.73626484027008,251.24365904086525,90.10834724046708,251.9767133056214,90.40450049606193,252.67883781030164,90.75359523016544,253.59196829383524,90.94222466663058,254.58087608496223,91.46935208842187,254.6596948018696,92.44277594552024,254.58674707597214,92.89062075421752,253.75993845816717,93.40856238206655,253.0012929321041,94.36575545962681,253.15304781394033,95.2368899079461,253.7665529309048,95.91945497388227,254.53404541882543,95.53896264809258,255.12589318878221,94.58529259642589,255.46311794037854,93.6494161838446,255.8210879760637,93.4270280890824,256.4617334190949,94.11976793111701,257.1531826165786,93.14578398545909,257.1935194264928,92.58327768759669,257.54252620333887,92.99374824654302,258.4766302561028,93.71458522728659,259.2336746576267,94.47449278973868,259.58606997040283,95.54346283928243,259.5753316351059,96.79212331797612,259.60510908454876,97.12066162733346,260.2455798117878,97.06288030221006,261.12868456784923,96.11963301662797,260.8577622863294,95.53391727129869,261.1596312585507,95.80604791720286,262.1226150613412,96.28152168584293,263.0286238467589,96.83546931536965,263.86484853797197,97.47845332631776,264.7202866448777,98.20708653370752,265.61819579444716,98.91975370829957,266.4626879134094,99.55957533310718,267.2222808054562,100.06967189114363,267.8654922742791,100.60070939039073,268.60328335994996,101.20824497360647,269.39815761210133,101.83852645028001,270.17714645840516,102.48620411967947,270.9443650735299,103.14592828107295,271.70392863214397,103.80756169894795,272.4537288719772,104.4714862889847,273.20310249516007,105.13316061211665,273.9570061310628,105.78718610448442,274.7194388334187,106.42816420222864,275.4943996559608,107.06960803380063,276.3353931310288,107.59062414392551,277.1487555501423,108.03205044251506,278.00134906252435,108.41137310194439,278.9279892544847,108.79177397782595,279.9642210245143,109.28239268027558,280.76823553239564,110.016118708603,281.30761582315824,110.8717114103487,281.65968820008175,111.91271345470881,282.1136271699189,112.73526446574239,282.6664978678727,113.49456831684371,283.3693920487278,114.15830682083539,284.13755089182723,114.73002859013545,284.8460079075192,115.73964858628823,284.50939922103066,116.65972439634047,284.18268060954404,117.6641672444971,283.7080964956406,118.25902666665043,283.21582959791465,119.05823341620149,282.9148797094948,119.10971871850259,281.9157094343026,119.13458679482663,280.9077174517485,119.16485437605789,279.90125270700014,119.28282032707018,278.9744735802917,120.1685842398486,278.78770575715845,120.22334057099611,277.7865208679369,120.26211858229749,276.7806971542276,120.86961459793865,276.43913775680534,121.85947942890158,276.64125369482673,122.62518623990604,276.3823426474598,122.93051800814457,275.48695806059874,122.85895229497592,274.51016506019323,122.65931215594162,273.47471558110504,122.43390348585709,272.4870382962381,121.9223587035619,271.824668119888,121.70558857277037,270.8517555358647,121.2647338361066,269.9590211671781,120.73786613277098,269.096194210732,120.26795411113339,268.21264161151186,120.00013768618659,267.26520315610406,120.07886211287968,266.29776691202517,120.5143792648057,265.36791651894487,121.11931536023424,264.55930325396895,121.86366320676956,263.86326544891267,122.7397188517737,263.3541491339776,123.45279119153653,262.8772976476319,123.68416322905928,261.90810625240215,123.77106817494143,260.8931102990033,123.75129376313863,259.8749070472175,123.6691849076045,258.8923572339623,122.83619361958417,258.4704831521457,122.0841315486113,257.78999060888583,121.45578983296907,256.98522019353754,120.87639568013864,256.0257917928326,120.43391258374247,255.06867889263307,120.16858703283188,254.23107810686386,120.21714397146566,253.26026222737755,120.8677795517464,252.5848922347073,121.74590431169912,252.08702036741315,122.571370576142,251.52245298429168,123.16942078150932,250.75068685089389,123.46402788415409,249.92699116663778,123.70194470736179,248.8594328289878,123.88483739838213,247.82520342382068,124.05142348009211,246.83289365279012,124.23205713650286,245.82860732659933,124.45597683413583,244.79795034252754,124.7549429888527,243.7794085781698,125.13257387279276,242.9066471746131,125.71334659039223,242.1382134222725,126.56034346876297,241.74161680310218,127.15807087252342,241.50251974033048,127.24001861023842,240.64801103044314,127.42984694975445,239.58772884921845,127.7104145783458,238.4315789113731,128.02693001366472,237.40240417919983,128.3842035636507,236.48578479698688,128.90483049469145,235.5377744795315,129.63401964633476,234.87250197874135,130.15176713446917,234.09277757972123,130.03722006284804,233.1883573811389,129.54799164249056,232.29213672885135,129.04040514804885,231.4087807068644,128.72312030885905,230.46904684256035,128.21567178828087,229.7768186473839,127.30355815105335,229.9664260797086,126.63985321381124,230.6786731298977,126.05621008380068,231.49750475191124,125.0564299918525,231.4163642734642,124.18061265484724,230.99282333059213,123.37730757793156,230.37594397699542,122.60627511579149,229.73131517943176,121.77398830520471,229.17210508934764,121.0670247128615,228.86556912931775,121.89107824778608,228.4008830414311,122.27705456365253,227.51879155804508,122.44897998473186,226.54520280310473,122.56304293557571,225.4804892257697,122.69514695504711,224.45756485170776,122.9221217182809,223.50446467512248,123.36896586704165,222.61819072268995,124.12900161473898,222.01600318161903,124.28191261674769,221.2154585577079,124.19281746249172,220.1960314761282,124.1486973043703,219.22751682754398,123.76523364899259,218.5389460659927,124.02400012894343,217.5724815094078,124.46128797938515,216.64448439538066,124.95900236997075,215.769430306911,125.47726579384725,214.89135386334166,125.95258931749996,214.02889953488858,126.3599989355948,213.08938549852175,126.51585814319812,212.10691002310148,126.16431789360377,211.25774066146062,125.37204793092634,210.73146631738905,124.3971157006547,210.44633947453184,123.97651352442497,209.67999444398066,123.71652558367694,208.7428520835371,123.57047763308421,207.75227010928236,124.52618072046612,207.58712424304963,125.3161152518068,207.04469604734453,125.85857122735419,206.21184351001443,126.19290898640762,205.24400133866416,126.36546776049208,204.27049445439496,126.42458133795755,203.24565932878096,126.37820803663146,202.2189276321866,126.23381236679032,201.22421729333263,125.98680382976328,200.27875833411048,125.5884218577917,199.35460462635405,124.96339406682131,198.5659667966025,124.11851263027609,198.14876426844577,123.11294465018734,197.96166810434198,122.11140654406732,197.9658419263784,121.10656752347654,198.13494168226148,120.17437646440203,198.46919473337203,119.32008886986634,199.02662402419162,118.62976425138046,199.74117412927666,117.80644512974388,200.28724670830306,116.88914280852634,200.71815116462315,115.99351222995499,201.16606064231843,115.24540497274916,201.8082808702704,114.87327235078743,202.63521408874274,114.504901803265,203.53009333463277,113.51912615961203,203.6290239436952,113.1596373048827,202.71753951687913,112.52951829857886,202.02506479349475,111.64005047792145,201.63139174464317,110.69027040036218,201.3032260380044,109.80432028977164,200.7980579627062,109.21580776639196,199.99238903904418,108.8796485055671,199.05081968202688,108.66890022183594,198.0043842404766,108.53012784180487,196.99026380857316,108.39450620074403,196.0543993070641,108.27245249650538,195.02364935662195,108.22146478349379,194.038374650429,108.24365119956738,193.07899518109951,108.34347339046255,192.1273307046445,108.51933242648965,191.15693295829823,108.77321824912507,190.14525176225163,108.99075297759913,189.21647358277804,109.08209590254542,188.2253056715366,109.13618114451073,187.1759231680721,109.23414091148979,186.13216755398167,109.45495286112866,185.16018447877846,109.90621364631028,184.29272120854728,110.54688973055117,183.57916143772502,110.64616051688903,182.61911874408148,110.73337721726826,181.61181387308412,110.77669672995927,180.58281083843295,110.74453413229246,179.55916421147018,110.60759591233368,178.56597822624644,110.32906887903907,177.61001911357025,109.87304411682886,176.72217388360895,109.38799948315086,176.15070187946705,108.7026768916394,175.603574386984,107.80566076876158,175.00704184020537,106.77142818586688,174.4034789956142,105.76352261202479,173.87807680716108,104.83399524285801,173.44843628310218,103.9240281444459,173.08759829351197,102.86073905629928,172.7871639361174,102.44510325926137,172.41729505956008,102.56423336626764,171.4376072086262,102.58232900160073,170.3975164626539,102.63444504721018,169.37121411172734,102.84383593495173,168.40665457951172,103.61478836078055,168.0911593621736,104.63749614253013,168.03990502973903,104.95398790521926,167.40890832709235,105.05288168472168,166.42539975437288,105.14108707772557,165.38897775467402,105.16502708277078,164.34518305355257,105.06746015914317,163.31881313054106,104.79008192696195,162.37564704117884,104.27445211156866,161.56846833528343,103.46405780150182,160.94386233970982,102.5410757146787,160.56076122943307,101.56711041511801,160.3138553721198,100.57474556618777,160.1812215487985,99.57629404627572,160.13470781929553,98.5602500930039,160.14924160945418,97.53398947646961,160.20588434949116,96.51012754508925,160.28653277204293,95.4991927501281,160.37197723056966,94.51171354285155,160.44300807853145,93.55821837452474,160.48041566938846,93.79158400647908,159.82243757934663,94.25700701940987,158.94382881953712,94.88208164460654,157.95035974997438,95.5553388366512,157.00325292307147,96.19336653389492,156.20366054098298,96.9005635911614,155.4423052679697,97.65584943199228,154.8684668730564,97.47403716315442,153.98636454622027,96.65846635697653,153.44057691643178,95.68275016773609,153.15816340883458,94.76948874748062,152.726221101477,94.08612193077755,152.02517307804712,93.43825661116563,151.26550599016065,92.59745362297176,150.67836046306655,91.64633985978045,150.4053571373313,90.69305050768772,150.21877476973958,89.78598302345621,149.82389531461175,88.94802949781807,149.21298487476213,88.0125627986493,148.90917951593846,87.014959577966,148.81597729610533,86.00692101920082,148.80078129839112,85.37151098260185,148.39898909479479,85.35256901969719,147.4009620319138,85.35666464507294,146.39230836275027,85.39271134579188,145.38151465367366,85.47193334451632,144.3598655541668,85.60337043996196,143.3635545312956,85.79648962284207,142.40496169676123,86.69865731828754,142.71921318980907,87.53145327499062,143.23891599779793,88.3921542480795,143.7074287973721,89.32739298819371,143.93336219620804,90.23965332276815,143.68263441798658,90.59795270525352,142.71793528592755,91.29287531558006,142.13606170003382,92.23159979496027,141.77395173926996,93.12459756370139,141.3356626216013,93.67022773958627,140.65710927122603,93.92083113732092,139.56718565849613,94.90625,139.44140600000003]
	
var score=0
var attempts=0
var turns=10
var game_in_progress=0
var rng=RandomNumberGenerator.new()

var challenge:=''
var selected_district:=''
var selected_color:=Color.darkorange
var deselect_color:=Color.lightyellow#Color("eeffcc88")
var selected_color_right:=Color.lightgreen
var selected_color_wrong:=Color.lightcoral
var district_label_text_color:=Color('f6b016')
var border_color=Color.darkgray#.black#Color.firebrick
var border_width:=1
var border_width_highlight:=5
var tw:=Tween.new()
var walkpath:=Line2D.new()
var path=[]

func revert_transform(poly:Polygon2D):
	if poly.transform != Transform2D.IDENTITY:
		var transformed_polygon = poly.transform.xform(poly.polygon)
		poly.transform = Transform2D.IDENTITY
		poly.polygon = transformed_polygon
		return poly

func merge_poly(history_item):
	var g=history_item[0]
	var clr=history_item[1]
	var main:Polygon2D=Polygon2D.new()
	var t=Transform2D()
	var ddims=d[g[0]]
	var p1=get_node(g[0]).get_child(0)
	t.origin=Vector2(ddims[0],ddims[1])
	var m
	if g.size()==1:
		m=t.xform(p1.polygon)
		main.polygon=m
	else:
		var t2=Transform2D()	
		ddims=d[g[1]]
		var p2=get_node(g[1]).get_child(0)
		t2.origin=Vector2(ddims[0],ddims[1])
		m=Geometry.merge_polygons_2d(t.xform(p1.polygon), 
										t2.xform(p2.polygon) )
		main.polygon=m[0]
		#debug
		#var test=main.duplicate()
		#test.color=Color.blueviolet
		#add_child(test)
		for i in range(2,len(g)):
			ddims=d[g[i]]
			t.origin=Vector2(ddims[0],ddims[1])
			var tp=t.xform(get_node(g[i]).get_child(0).polygon)
			m=Geometry.merge_polygons_2d(main.polygon, tp)
			main.polygon=m[0]
			#debug
	#		#test=main.duplicate()
			#test.color=Color(rng.randi_range(70,200))
			#add_child(test)
			#cnt=cnt+1
		#main.color=Color(rng.randf_range(0.6,1.0), rng.randf_range(0.0,1.0), rng.randf_range(0.0,0.26))
	main.color=clr
	#Color(rng.randf_range(0.1,0.54), rng.randf_range(0.3,0.8), rng.randf_range(0.2,0.91))
	return main
	
		
func create_polygons(s:Sprite):
	var b=BitMap.new()
	b.create_from_image_alpha(s.texture.get_data())
	var rect=Rect2(0, 0, s.texture.get_width(), s.texture.get_height())
	var polys=b.opaque_to_polygons(rect)
	var p=Polygon2D.new()
	var c=CollisionPolygon2D.new()
	var shape
	if s.texture.resource_path=="res://Tirupathur.png":
		shape=polys[1]
	elif s.texture.resource_path=="res://Tirunelveli.png":
		shape=PoolVector2Array()
		var pts=[ -128.8, -138.5, -128, -138.5, -101, -103.5, -99, -103.5, -54, -105.5, -54, -103.3, -46, -95.3, -46, -92.8, -42.7, -85.5, -30.3, -75.5, -28.2, -75.5, -21.3, -90.5, -15.8, -90.5, 7, -86, 16, -103, 16, -104.8, 7.60001, -114.1, 8.7, -116.5, 9.89999, -116.5, 18.8, -132.5, 22.6, -132.5, 33.6, -125.5, 41, -125.5, 69, -124.5, 69, -122.4, 92, -101.4, 92, -99, 106, -79.1, 106, -73.7, 95, -61.6, 95, -55.5, 98.3, -30.5, 96.4, -30.5, 86.7, -5.7, 95.3, 13.5, 96, 13.5, 105, 24.8, 105, 47.9, 112, 58.9, 112, 63.8, 109.5, 71.2, 119.7, 79.5, 138, 79.5, 138, 90.5, 115.6, 104.5, 113.4, 104.5, 89, 115.7, 85.5, 128.5, 83.7, 128.5, 66.7, 142.5, 63, 142.5, 23.9, 151.5, -6.5, 151.5, -8, 150.9, -8, 149.6, -11, 147.6, -11, 134.5, -12.1, 118.5, -9.3, 118.5, 1.3, 113.9, -12, 92.1, -12, 88.5, -13.8, 72.4, -27, 70.2, -27, 68.5, -35, 62.5, -35, 58.5, -36.8, 46.5, -44, 37.2, -44, 30.3, -44.8, 29.5, -47.3, 29.5, -72, 20.9, -72, 19.7, -103, 3.7, -103, 2.2, -125, -22.7, -125, -25, -138, -47, -138, -53.4, -125, -64.4, -125, -66, -116.2, -82.5, -114.8, -82.5, -109, -88.3, -109, -89.7, -107.4, -96.8, -111.3, -105.5, -111.9, -105.5, -138, -137.4, -138, -151.5, -135.8, -151.5 ]
		for i in range(0,len(pts),2):
			shape.append(Vector2(pts[i]+137,pts[i+1]+151))
	else:
		shape=polys[0]
	p.polygon=shape
	p.position=s.position - Vector2(s.texture.get_width()/2.0,s.texture.get_height()/2.0)
	p.color=deselect_color
	c.polygon=shape
	c.position=s.position - Vector2(s.texture.get_width()/2.0,s.texture.get_height()/2.0)
	return [c, p]

#var shore:ShaderMaterial
#func applyshore(district):
#	var dp:Polygon2D=get_node(district).get_child(0)
#	dp.material=shore

func _ready():
	init_label_font()
	#shore=ShaderMaterial.new()
	#shore.shader=load("res://shore.shader")
	rng.randomize()
	add_child(tw)
	VisualServer.set_default_clear_color('001f3f')#Color("ff222222"))
	for district in d.keys():
		var a2d=Area2D.new()
		var x=d[district][0]
		var y=d[district][1]
		var s=Sprite.new()
		var image=load("res://"+district+".png")
		s.texture=image
		var w=s.texture.get_width()
		var h=s.texture.get_height()
		d[district].append(w)
		d[district].append(h)
		var polys=create_polygons(s)
		s.free()
		a2d.add_child(polys[1])
		a2d.add_child(polys[0])
		a2d.name=district
		a2d.show_behind_parent=true
		a2d.position=Vector2(x+(w/2),y+(h/2))
		#a2d.hide()
		add_child(a2d)
		add_label(district, x, y, w, h, "dlabels")
		a2d.connect('input_event', self, 'on_district_select',[district])
	var t:=Transform2D()
	t=t.scaled(Vector2(8,8))
	t.origin=Vector2(-620,-430)
	for i in range(0, keralaborder.size(),2):
		walkpath.add_point(t.xform(Vector2(keralaborder[i],keralaborder[i+1])))
	walkpath.width=1
	walkpath.default_color=Color.gray
	add_child(walkpath)
	walkpath.show()
#	var tnborderpath:=Line2D.new()
#	for i in range(0, tnborder.size(),2):
#		tnborderpath.add_point(t.xform(Vector2(tnborder[i],tnborder[i+1])))
#	add_child(tnborderpath)
#	tnborderpath.show()
	$Camera2D.position=get_node('Karur').position
	$Camera2D.zoom=Vector2(2.6, 2.6)
	$Label.rect_scale=$Camera2D.zoom


var dhistory=[{
	Salem=[['Salem', 'Dharmapuri', 'Namakkal', 'Krishnagiri'],Color.mediumspringgreen],
	Coimbatore=[['Tiruppur', 'Coimbatore', 'Erode'], Color.darkgreen],#006400
	Madurai=[['Madurai', 'Dindigul', 'Theni'], Color.lightgreen],#90ee90
	Ramanathapuram=[['Ramanathapuram', 'Sivagangai','Virudhunagar'], Color('fffa90')], #fffacd
	Tirunelveli=[['Tirunelveli', 'Thoothukudi', 'Tenkasi'], Color.honeydew],#f0fff0
	"North Arcot":[['Tiruvannamalai', 'Vellore', 'Tirupathur','Ranipet'],Color.indigo],
	"South Arcot":[['Cuddalore','Vilippuram','Kallakurichi'], Color.violet],
	"Chinglepet":[['Chengalpattu','Kanchipuram','Tiruvallur'],Color('aa22aa')],
	"Tiruchirapalli":[['Karur','Tiruchirapalli','Perumbalur','Ariyalur'],Color('ffd711')], #fa8072
	Thanjavur=[['Pudukotai','Thanjavur','Tiruvarur','Nagapattinam','Mayiladithurai'],Color.peachpuff], #ffda89
	Madras=[['Chennai'], Color.lightgoldenrod],
	Nilgiris=[['Nilgiris'],Color('adff2f')],
	Kanyakumari=[['Kanyakumari'],Color.gold],	
	},
	{
		Salem=[['Salem','Namakkal'], Color.mediumspringgreen], 
		Dharmapuri=[['Dharmapuri','Krishnagiri'],Color.mediumspringgreen.darkened(.4)] 
	},
	{	
		Thanjavur=[['Thanjavur','Tiruvarur','Nagapattinam','Mayiladithurai'],Color.peachpuff], #ffda89
		Pudukotai=[['Pudukotai'], Color.peachpuff.darkened(.3)]
	},
	{
		Coimbatore=[['Tiruppur','Coimbatore'], Color.darkgreen],#006400
		Erode=[['Erode'], Color.darkgreen.lightened(.2)]
	},
	{
		Ramanathapuram=[['Ramanathapuram'], Color('fffa90')],
		Sivagangai=[['Sivagangai'], Color('fffa90').lightened(.2)],
		Virudhunagar=[['Virudhunagar'], Color.lightgreen.lightened(.3)], #fffacd
	},
	{
		Madurai=[['Madurai','Theni'], Color.lightgreen],
		Dindigul=[['Dindigul'], Color.lightgreen.lightened(.1)],
	},
	{
		Tirunelveli=[['Tirunelveli','Tenkasi'],Color.honeydew],#f0fff0
		Thoothukudi=[['Thoothukudi'],Color.honeydew.darkened(.2)]#f0fff0
	},
	{
		"North Arcot":[[],Color.transparent],
		Tiruvannamalai=[['Tiruvannamalai','Tirupathur'],Color.indigo],
		Vellore=[['Vellore','Ranipet'],Color.indigo.lightened(.3)]
	},
	{
		Thanjavur=[['Thanjavur'], Color.skyblue], #ffda89 
		Tiruvarur=[['Tiruvarur','Mayiladithurai'], Color.skyblue.darkened(.2)], #ffda89
		Nagapattinam=[['Nagapattinam'], Color.skyblue.darkened(.4)] #ffda89
	},
	{
		"South Arcot":[[],Color.transparent],
		"Cuddalore":[['Cuddalore'], Color.violet],
		"Vilippuram":[['Vilippuram','Kallakurichi'], Color.violet.lightened(.3)],
	},
	{	
		'Tiruchirapalli':[['Tiruchirapalli'], Color('ffd711')],
		"Perumbalur":[['Perumbalur','Ariyalur'], Color('ffd711').darkened(.2)],
		"Karur":[['Karur'], Color('ffd711').darkened(.4)]
	},
	{
		Madurai=[['Madurai'], Color.lightgreen],#90ee90
		Theni=[['Theni'], Color.lightgreen.darkened(.3)]#90ee90
	}, 
	{	
		Salem=[['Salem'], Color.mediumspringgreen],
		"Namakkal":[['Namakkal'], Color.mediumspringgreen.darkened(.3)],
	},
	{	
		"Chinglepet":[[],Color.transparent],
		"Tiruvallur":[['Tiruvallur'],Color('aa22aa')],
		"Kanchipuram":[['Chengalpattu','Kanchipuram'],Color('bb55bb')],
	},  
	{	Dharmapuri=[['Dharmapuri'],Color.mediumspringgreen.darkened(.4)], 
		"Krishnagiri":[['Krishnagiri'],Color.mediumspringgreen.darkened(.7)] 
	},
	{	
		"Perumbalur":[['Perumbalur'],Color('ddd711')],
		"Ariyalur":[['Ariyalur'],Color('ddd711').lightened(.3)]
	},
	{
		Coimbatore=[['Coimbatore'], Color.darkgreen],
		"Tiruppur":[['Tiruppur'], Color.darkgreen.lightened(.5)],
	},
	{
		Tirunelveli=[['Tirunelveli'],Color.honeydew],
		"Tenkasi":[['Tenkasi'],Color.honeydew.darkened(.3)],
	},
	{
		"Vilippuram":[['Vilippuram'], Color.violet.lightened(.3)],
		"Kallakurichi":[['Kallakurichi'], Color.violet.lightened(.8)],
	},
	{
		Tiruvannamalai=[['Tiruvannamalai'],Color.indigo],
		"Tirupathur":[['Tirupathur'],Color.indigo.darkened(.4)],
	},
	{
		Vellore=[['Vellore'],Color.indigo.lightened(.3)],
		"Ranipet":[['Ranipet'],Color.indigo.lightened(.6)],
	},
	{
		"Kanchipuram":[['Kanchipuram'],Color('bb55bb')],
		"Chengalpattu":[['Chengalpattu'],Color('bb55bb').darkened(.4)],		
	},
	{
		Tiruvarur=[['Tiruvarur'],Color.skyblue.darkened(.2)], #ffda89	
		"Mayiladithurai":[['Mayiladithurai'],Color.skyblue.darkened(.6)], #ffda89
	}
	]	

static func merge_dict(target, patch):
	for key in patch:
		target[key] = patch[key]

func add_historic_districts(year, data):
	var tmp:Polygon2D
	for i in data.keys():
		if data[i][0].size() > 0:
			tmp=merge_poly(data[i])
			tmp.hide()
			tmp.show_behind_parent=true
			tmp.name=i+'history'#year
			tmp.add_to_group(year)
		if has_node(i+'history'):
			#remove_child(get_node(i+'history'))
			get_node(i+'history').free()
		if tmp!=null:
			add_child(tmp)
			if has_node('lbl'+i):
				get_node('lbl'+i).show()
				get_node('lbl'+i).add_to_group(year)
			else:
				add_label(i, d[data[i][0][0]][0], d[data[i][0][0]][1], 0.0, 0.0, year)

func _unhandled_input(event):
	if event is InputEventKey:
		if event.pressed and event.scancode == KEY_ESCAPE:
			get_tree().quit()
		
func on_district_select(_viewport, event, _idx, district):
	if event is InputEventMouseButton:
		if event.pressed:
			#select(district)
			path.clear()
			path.append(district)
		else:
			#on release touch check whats in path and move if required
			select(district)
				#gotoDistrict()
		#walkpath.clear_points()
		#walkpath.add_point(get_node(district).position)
	
#	#if event is InputEventMouseMotion:
#			#walkpath.add_point(get_node(district).position)
	if event is InputEventScreenDrag:
		if district in path:
			pass
		else:
			path.append(district)
		#walkpath.add_point(get_node(district).position)
#		highlight_district(district, false, true)

func select(district):
	if game_in_progress==1 and attempts < turns:
		if district == challenge:
			score+=1
			attempts+=1
			$HUD/Score.text=str(score)+' / '+str(attempts)
			#get_node(district).get_child(0).color=selected_color_right
			blink(district, selected_color_right)
			$Label.text=district
			var gpos=get_node(district).position
			$Label.rect_global_position =gpos
			timed_msg("[color=#"+selected_color_right.to_html(false)+"]Correct![/color]", 1, 2)
			yield($Timer, "timeout")
			if attempts < turns:
				new_challenge()
		else:
			attempts+=1
			$HUD/Score.text=str(score)+' / '+str(attempts)
			get_node(district).get_child(0).color=selected_color_wrong
			$HUD/Message.bbcode_text=challenge+"???\n  [color=#ee2211]Try Again![/color]\nThat was "+district
		if attempts==turns:
			if timedquiz:
				$QuizTimer.stop()
				#TODO perf optimize pulse
				#timed_msg('[color=#ffcc99][pulse color=#ffcc33 freq=10]Not bad! \nYou scored '+str(score)+' / '+str(turns)+'\n Taking '+str(seconds)+' seconds[/pulse][/color]',2, 8, Color.orangered)
				timed_msg('[color=#'+Color.orangered.to_html(false) +']Not bad! \nYou scored '+str(score)+' / '+str(turns)+'\n Taking '+str(seconds)+' seconds[/color]',2.5)
			else:
				#timed_msg('[pulse freq=5][color=#ffcc55]Not bad! \nYou scored '+str(score)+' / '+str(turns)+'[/color][/pulse]',2, 8, Color.orangered)
				timed_msg('Not bad! \nYou scored '+str(score)+' / '+str(turns),2.5)
			yield($Timer, "timeout")
			challenges_completed.clear()
			game_over()
	elif game_in_progress==2:
		#history
		pass
	elif game_in_progress==3:
		#main game treasure hunt
		pass
	else:
		#get_tree().set_group("dlabels", "visible", false)
		#check if path has anything and move
		gotoDistrict()
		
#deselect district if one is already selected before selecting new one
#selecting = change color + add border
func highlight_district(district, show_neighbours:=true):
	if district!=selected_district and selected_district!='':
		deselect()
	else:
		if district==selected_district:
			# already selected so deselect
			deselect()
			$Label.text=''
			selected_district=''
			update() # redraw borders
			return
	selected_district=district
	$Label.text=district
	var sd:Area2D=get_node(selected_district)
	$Label.rect_global_position=sd.position
	var poly=sd.get_child(0)
	poly.color=selected_color
	#selected_district_border_pts=PoolVector2Array(poly.polygon)
	if show_neighbours:
		var oa=sd.get_overlapping_areas()		#get_tree().set_group("dlabels", "visible", false)
		#wait for set completion
		var tmp=$Timer.wait_time
		$Timer.start(.3)
		yield($Timer, 'timeout')
		$Timer.wait_time=tmp
		for i in oa:
			if i.name=='Gopal':
				continue
			get_node('lbl'+i.name).visible=true
			i.get_child(0).color=deselect_color.blend("aa66aa22")
			#tw.interpolate_property(i.get_child(0), 'color', deselect_color, deselect_color.blend("aa66aa22"),1)
			#tw.start()
			#yield(tw,"tween_completed")
	update() # redraw borders
			
func deselect():
	for district in d.keys():
		get_node(district).get_child(0).color=deselect_color
var cache={}
func _draw():
	#history
	if game_in_progress==2 and clear_borders==false:
#		var drawuptil=0
#		for i in current_year-1:
#			drawuptil+=dhistory[i].size()
#		print(cache.size(), drawuptil)
		for idx in cache:
			var poly=cache[idx]
			var cnt=poly.size()
			for i in range(1, cnt):
				draw_line(poly[i-1], poly[i], Color.darkgray, 1)
			draw_line(poly[cnt-1], poly[0], Color.darkgray, 1)
		#draw newly merged
		for dx in dhistory[current_year-1]:
			if dhistory[current_year-1][dx][0].size() > 0: 
				var poly=PoolVector2Array(get_node(dx+'history').polygon)
				cache[dx]=poly
				var cnt=poly.size()
				for i in range(1, cnt):
					draw_line(poly[i-1], poly[i], border_color, border_width_highlight)
				draw_line(poly[cnt-1], poly[0], border_color, border_width_highlight)
	else:
		cache.clear()
		for dx in d.keys():
			var poly=PoolVector2Array(get_node(dx).get_child(0).polygon)
			var cnt=poly.size()
			var center_at=Vector2(d[dx][0], d[dx][1])
			if dx != selected_district:
				for i in range(1, cnt):
					draw_line(poly[i-1]+center_at, poly[i]+center_at, border_color, border_width )
				draw_line(poly[cnt-1]+center_at, poly[0]+center_at, border_color, border_width )
			else:		
				for i in range(1, cnt):
					draw_line(poly[i-1]+center_at, poly[i]+center_at, border_color, border_width_highlight )
				draw_line(poly[cnt-1]+center_at, poly[0]+center_at, border_color, border_width_highlight )
	
func _on_Button_pressed():
	reset()
	game_in_progress=1
	$HUD/Score.text=str(score)
	timed_msg("[pulse color=#22ff44 height=-10 freq=10]You have 10 turns\n Find the Districts![/pulse]",2)
	yield($Timer,"timeout")
	timedquiz=false
	new_challenge()


var challenges_completed:=[]
func new_challenge():
	while true:
		challenge=d.keys()[rng.randi_range(0,len(d)-1)]
		if challenge in challenges_completed:
			continue
		else:
			challenges_completed.append(challenge)
			break
	$HUD/Message.bbcode_text=challenge+" ???"

func game_over():
	deselect()
	path.clear()
	seconds=0
	$HUD/Timeline.bbcode_text=''
	#walkpath.clear_points()
	$HUD/Score.text=''
	$HUD/Clock.text=''
	$HUD/Message.bbcode_text=''
	$Label.text=''
	$HUD/Quiz.show()
	$HUD/Timed.show()
	$HUD/Learn.show()
	$HUD/Info.show()
	$Camera2D.position=get_node('Karur').position
	#show_compass()
	$Gopal.show()
	game_in_progress=0
	update() # redraw borders
	#var tree=get_tree()
#	for i in years:
#		var ng=tree.get_nodes_in_group(i)
#		print(i,' ', tree.has_group(i), ' ',ng.size())
#		for j in ng:
#			print(j.name)
#	print('GAME OVER ******',tree.get_node_count())

func blink(district, color):
	var dx=get_node(district).get_child(0)
	for i in 5:
		dx.modulate=color
		yield(get_tree(), "idle_frame")
		dx.modulate= Color(1.0, 1.0, 1.0)
		yield(get_tree(), "idle_frame")
	dx.modulate=Color(1.0, 1.0, 1.0)
	dx.color=color

func timed_msg(msg, period, blink:=0, blinkcolor:=Color.green):
	$HUD/Message.bbcode_text=msg
	$Timer.wait_time=period
	$Timer.start()
#	$HUD/Message.modulate= Color(1.0, 1.0, 1.0)
#	$HUD/Message.text=msg
#	if blink:
#		for i in blink:
#			$HUD/Message.modulate = blinkcolor
#			yield(get_tree(), "idle_frame")
#			$HUD/Message.modulate= Color(1.0, 1.0, 1.0)
#			yield(get_tree(), "idle_frame")

#func process(_delta):
#	walkpath.show()

func borders(show):
	if show:
		clear_borders=false
		border_width=1
		border_color=Color.darkgray
		update()
	else:
		clear_borders=true
		border_width=0
		border_color=Color.transparent
		update()

func reset():
	score=0
	attempts=0
	$Gopal.hide()
	$HUD/Quiz.hide()
	$HUD/Timed.hide()
	$HUD/Info.hide()
	#since the learn button is used to show years
	#if game_num!=2:
	#	$HUD/Learn.hide()
	#else:
	if game_in_progress==2:
		borders(false)
	#hide_compass()
	if selected_district!='':
		deselect()
		$Label.text=''
		get_tree().set_group("dlabels","visible",false)

func gotoDistrict():
	#reset()
	var current
	var distance
	var time
	$Gopal/CollisionShape2D.disabled = true
	$Gopal.initiated_by_code=true
	while path.size() > 0 :
		current=path.pop_front()
		highlight_district(current,false)
		var gpos=get_node(current).position
		distance=$Gopal.position.distance_to(gpos)
		var direction=$Gopal.position.direction_to(gpos)
		$Gopal.velocity=direction
		time=distance/$Gopal.speed
		#if OS.get_name()=='Android':
		#	tw.interpolate_property($Gopal,"position",$Gopal.position,gpos,0.2)
		#else:
		tw.interpolate_property($Gopal,"position",$Gopal.position,gpos,time)
		tw.start()
		var x=yield(tw, 'tween_completed')
	$Gopal.velocity=Vector2(0,0)
	$Gopal.initiated_by_code=false
	$Gopal/CollisionShape2D.disabled = false
	game_in_progress=0
	#game_over()
		
func fullwalktest():
	reset()
	game_in_progress=3
	var current='Chennai'
	var visited=[current]
	$Camera2D/Gopal/CollisionShape2D.disabled = true
	$Camera2D/Gopal.position=Vector2(0,0)
	#$Camera2D/Gopal/AnimatedSprite.animation = "walk"
	#$Camera2D/Gopal/AnimatedSprite.play()
	while len(visited) < len(d):
		var i:Area2D=get_node(current)
		var gpos=i.position
		#walkpath.add_point(gpos)
		$Camera2D/Tween.interpolate_property($Camera2D,"position",$Camera2D.position,gpos,1.4)
		$Camera2D/Tween.start()
		# not required gopal will highlight
		$Label.text=current
		$Label.rect_global_position=get_node(current).position
		var poly=i.get_child(0)
		poly.color=selected_color
		var neighbours=i.get_overlapping_areas()
		for n in neighbours:
			if n.name == 'Gopal':
				continue
			if n.name in visited:
				continue
			else:
				current=n.name
				visited.append(n.name)
				break
		timed_msg('Districts visited\n'+str(len(visited))+' out of '+str(len(d)),1 )
		#yield($Timer, "timeout")
		if(i.name == current):
			current=visited[-2]
		if(i.name == current):
			var jump
			while true:
				jump=d.keys()[rng.randi_range(0,len(d)-1)]
				if visited.has(jump) == false:
					current=jump
					break
			visited.append(jump)
	$Camera2D/Gopal/CollisionShape2D.disabled = false
	#$Camera2D/Gopal/AnimatedSprite.stop()
	game_over()

var df
func init_label_font():
	var f=load("res://Xolonium-Regular.ttf")
	df=DynamicFont.new()
	df.font_data=f
	df.size=44

func add_label(district, x, y, w, h, groupname):
	var l:Label=Label.new()
	l.set("custom_fonts/font",df)
	l.set("custom_colors/font_color", district_label_text_color)
	l.set("custom_colors/font_color_shadow", Color.black)
	l.set("custom_constants/shadow_offset_x",3)
	l.set("custom_constants/shadow_offset_y",3)
	l.set("custom_constants/shadow_as_outline",0)
	l.visible=false
	l.text=district
	l.name='lbl'+district
	l.rect_position=Vector2(x+w/2, y+h/2)
	l.add_to_group(groupname)
	add_child(l)

func _on_Labels_toggled(button_pressed):
	if button_pressed:
		get_tree().set_group("dlabels","visible",true)
		#$HUD/Labels["custom_styles/normal"].bg_color = Color("#bada55")
		$HUD/Labels["modulate"]=district_label_text_color
	else:
		get_tree().set_group("dlabels","visible",false)
		$HUD/Labels["modulate"]=Color(1.0, 1.0, 1.0)

var cell=preload("res://cell.tscn")
var district_animator

func _on_TN_ready():
	#$Timer.start(1)
	#yield($Timer,"timeout")
	#if OS.get_name()=='Android':
	#	$HUD/Message.anchor_left=.45
	district_animator=cell.instance()
	add_child(district_animator)
	
func neighbours(districtname):
	var l=get_node(districtname).get_overlapping_areas()
	var n=[]
	for i in l:
		if i.name !='Gopal':
			n.append(i.name)
	return n

var years=["1956","1965","1974","1979","1985",
"1985x2","1986","1989","1991",
"1993","1995","1996","1997","1997x2",
"2004","2007","2007x2",
"2019","2019x2","2019x3","2019x4","2019x5",
"2020"]
var current_year=0

func name(n):
	#print(n.name)
	if n.name == 'North Arcothistory':
		return 'Tiruvannamalai'
	elif n.name == 'South Arcothistory':
		return 'Cuddalore'
	elif n.name == 'Chinglepethistory':
		return 'Kanchipuram' 
	elif n.name == 'Trichyhistory':
		return 'Tiruchirapalli' 
	elif n.name == 'Madrashistory':
		return 'Chennai' 
	else:
		return n.name.replace('history','')

var clear_borders:=false

func add_to_dist_timeline(names):
	if names.size()==2:
		$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1])
		return
	if names.size()==3:
		$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1]+'\n        '+names[2])
		return
	$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1]+'\n')
	for s in range(2, names.size(),2):
		if s+1 < names.size():
			$HUD/Timeline.append_bbcode('         '+names[s]+', '+names[s+1]+'\n')
		else:	
			$HUD/Timeline.append_bbcode('         '+names[s])
				
func _on_Learn_toggled():
	$HUD/Learn.hide()
	var old
	var newlist
	while true:
		if game_in_progress!=2:		 
			game_in_progress=2
			reset()
			add_historic_districts(years[current_year], dhistory[0])
			# using karur as proxy center
			old=[{node=get_node('Karur'),loc=get_node('Karur').position}] #d['Karur']}]
			newlist=[]
			$HUD/Timeline.bbcode_text='[color=yellow]'+years[current_year]+'[/color]'
			var names=[]
			for n in get_tree().get_nodes_in_group(years[current_year]):
				if n is Polygon2D:
					#newlist.append({node=n, loc=d[name(n)]})
					names.append(n.name.replace('history',''))		
					newlist.append({node=n, loc=get_node(name(n)).position}) #d[name(n)]})
			district_animator.start(old, newlist)
			yield(district_animator, "move_complete")
			add_to_dist_timeline(names)
			borders(true)
			get_tree().call_group(years[current_year],"show")
			current_year=current_year+1
			update() # careful draw uses current_year - 1 
			continue
		if current_year>=len(years):
			for i in range(0,len(years)):
				get_tree().call_group(years[i],"hide")
				get_tree().call_group(years[i],"queue_free")
				current_year=0
				get_tree().call_group('1956',"hide")
				#$HUD/Learn.text='History'
			game_over()
			#print('after queue free ***********', get_tree().get_node_count())
			return
		#get_tree().set_group(years[current_year-1],"modulate",Color(0.0,0.0,0.0))
		get_tree().call_group(years[current_year-1],"hide")
		newlist=[]
		var key=dhistory[current_year].keys()[0]	
		old=[{node=get_node(key+'history'), loc=get_node(name(get_node(key+'history'))).position}]#get_node(name(key)).position}] #get_node(key).position}]
		add_historic_districts(years[current_year], dhistory[current_year])
#		$HUD/Message.text=$HUD/Message.text+'\n'+years[current_year]
		$HUD/Timeline.append_bbcode('\n[color=yellow]'+years[current_year]+'[/color]')
		var names=[]
		for n in get_tree().get_nodes_in_group(years[current_year]):
			if n is Polygon2D:
				names.append(n.name.replace('history',''))
				#newlist.append({node=n, loc=d[name(n)]})
				newlist.append({node=n, loc=get_node(name(n)).position}) #d[name(n)]})
		district_animator.start(old, newlist)
		yield(district_animator, "move_complete")
		add_to_dist_timeline(names)
		borders(true)
		#$HUD/Learn.text=years[current_year]
		get_tree().call_group(years[current_year],"show")
		current_year=current_year+1
	print(current_year, ' done')

var seconds:=0
var timedquiz:=false
func _on_QuizTimer_timeout():
	seconds=seconds+1
	$HUD/Clock.text=str(seconds)

func _on_Info_pressed():
	if selected_district!='':
		$HUD/Grid.reload(selected_district, neighbours(selected_district))

func _on_Timed_pressed():
	reset()
	game_in_progress=1
	$HUD/Score.text=str(score)
	timed_msg("[pulse color=#44dd22 height=-15 freq=5]You have 10 turns\n Find the Districts![/pulse]",2)
	yield($Timer,"timeout")
	new_challenge()
	timedquiz=true
	$QuizTimer.start()
